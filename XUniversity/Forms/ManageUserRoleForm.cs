using System;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using System.Configuration;
using Oracle.ManagedDataAccess.Client;
using System.Drawing; // Needed for Point, Size, Padding, etc.

namespace XUniversity.Forms
{
    public partial class ManageUserRoleForm : Form
    {
        private OracleConnection connection;

        // Constructor không tham số: tự đọc connection string và mở kết nối
        public ManageUserRoleForm()
        {
            // Initialize the components generated by the designer (or the manual InitializeComponent)
            InitializeComponent();

            // --- Database Connection Setup ---
            // This part remains the same
            string cs = ConfigurationManager.ConnectionStrings["OracleDbContext"].ConnectionString;
            connection = new OracleConnection(cs);
            try
            {
                connection.Open();
                // Optional: Display a success message or status in the form title/status bar
                // this.Text += " (Connected)";
            }
            catch (Exception ex)
            {
                MessageBox.Show("Không thể kết nối tới Oracle: " + ex.Message,
                                "Lỗi kết nối", MessageBoxButtons.OK, MessageBoxIcon.Error);
                // Consider disabling buttons or closing the form if connection fails
                // this.Load += (s, ev) => this.Close(); // Example: Close on load if connection fails
            }
        }

        // Constructor cho phép truyền connection từ bên ngoài nếu cần
        public ManageUserRoleForm(OracleConnection conn) : this() // Call parameterless constructor first
        {
             // Only replace if a valid connection is provided and the default one was opened
            if (conn != null && conn.State == ConnectionState.Open && connection != null && connection.State == ConnectionState.Open)
            {
                // Close the connection opened by the default constructor
                connection.Close();
                // Use the passed-in connection
                connection = conn;
            }
            // If the default connection failed to open, and a valid one is passed, use it.
            else if (conn != null && conn.State == ConnectionState.Open && (connection == null || connection.State != ConnectionState.Open))
            {
                 connection = conn;
            }
             // If default connection failed and the passed-in one is invalid/null,
             // the form might be unusable or the connection error was already shown.
        }


        // --- Button Click Handlers ---

        private void btnViewUsers_Click(object sender, EventArgs e)
        {
            // Display data in a DataGridView filling the panel
            DisplayData(
                "SELECT username FROM all_users WHERE oracle_maintained = 'N'"
            );
        }

        private void btnViewRoles_Click(object sender, EventArgs e)
        {
            // Display data in a DataGridView filling the panel
            DisplayData(
                "SELECT role FROM dba_roles ORDER BY role" // Added ORDER BY for better view
            );
        }

        private void DisplayData(string sql)
        {
             // Clear the main panel
            pnlMain.Controls.Clear();

            // Check if connection is open
            if (connection == null || connection.State != ConnectionState.Open)
            {
                MessageBox.Show("Kết nối tới cơ sở dữ liệu chưa được mở.", "Lỗi kết nối", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            // Create and configure DataGridView
            var dgv = new DataGridView
            {
                Dock = DockStyle.Fill, // Make it fill the entire pnlMain
                ReadOnly = true,
                AllowUserToAddRows = false, // Prevent adding new blank rows
                AllowUserToDeleteRows = false, // Prevent deleting rows via UI
                AllowUserToResizeRows = false,
                AllowUserToOrderColumns = true, // Allow reordering columns
                SelectionMode = DataGridViewSelectionMode.FullRowSelect, // Select entire row
                MultiSelect = false, // Only one row can be selected at a time
                BackgroundColor = SystemColors.ControlLightLight, // White background
                BorderStyle = BorderStyle.None, // No border on the grid itself (panel has one)
                ColumnHeadersDefaultCellStyle = { BackColor = SystemColors.Control, ForeColor = SystemColors.WindowText, Font = new Font(dgv.Font, FontStyle.Bold) }, // Style headers
                EnableHeadersVisualStyles = false, // Needed for custom header style
            };

            // Add some padding if you want space between panel border and grid
            // pnlMain.Padding = new Padding(5); // Uncomment if needed

            // Add the DataGridView to the panel
            pnlMain.Controls.Add(dgv);

            try
            {
                using (var cmd = new OracleCommand(sql, connection))
                using (var adapter = new OracleDataAdapter(cmd))
                {
                    var dt = new DataTable();
                    adapter.Fill(dt);
                    dgv.DataSource = dt;

                    // Auto-size columns nicely AFTER data is loaded
                    dgv.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
                    // Then set fill mode, but keep minimum width
                    foreach (DataGridViewColumn column in dgv.Columns)
                    {
                         column.FillWeight = 1; // Distribute available space
                    }
                    dgv.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message,
                                "Lỗi truy vấn", MessageBoxButtons.OK, MessageBoxIcon.Error);
                // Clear the grid in case of error
                dgv.DataSource = null;
            }
        }

        // --- Input Form Generation Methods (Using TableLayoutPanel) ---

        private void btnCreateUser_Click(object sender, EventArgs e)
        {
            ShowInputForm(
                "Create New User", // Title for the form section
                new FormField[]
                {
                    new FormField("Username", "txtUsername", FieldType.TextBox),
                    new FormField("Password", "txtPassword", FieldType.TextBox, isPassword: true) // Mark as password field
                },
                "Create", // Button text
                (values) => // Action to perform on submit
                {
                    string username = values["txtUsername"];
                    string password = values["txtPassword"];
                    if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
                    {
                         MessageBox.Show("Username and Password cannot be empty.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                         return false; // Indicate validation failed
                    }
                    ExecNonQuery(
                        $"CREATE USER {username} IDENTIFIED BY \"{password}\"", // Enclose password in quotes just in case
                        "User created successfully.",
                        "Lỗi tạo user"
                    );
                    return true; // Indicate action attempted (success/fail handled by ExecNonQuery)
                }
            );
        }

        private void btnEditUser_Click(object sender, EventArgs e)
        {
            ShowInputForm(
                 "Edit User Password",
                 new FormField[]
                 {
                     new FormField("Username", "txtUsername", FieldType.TextBox),
                     new FormField("New Password", "txtNewPassword", FieldType.TextBox, isPassword: true)
                 },
                 "Update Password",
                 (values) =>
                 {
                     string username = values["txtUsername"];
                     string newPassword = values["txtNewPassword"];
                     if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(newPassword))
                     {
                          MessageBox.Show("Username and New Password cannot be empty.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                          return false;
                     }
                     ExecNonQuery(
                         $"ALTER USER {username} IDENTIFIED BY \"{newPassword}\"", // Enclose password in quotes
                         "User password updated successfully.",
                         "Lỗi cập nhật user"
                     );
                      return true;
                 }
             );
        }

        private void btnDeleteUser_Click(object sender, EventArgs e)
        {
            ShowInputForm(
                 "Delete User",
                 new FormField[]
                 {
                     new FormField("Username", "txtUsername", FieldType.TextBox)
                 },
                 "Delete User",
                 (values) =>
                 {
                     string username = values["txtUsername"];
                     if (string.IsNullOrWhiteSpace(username))
                     {
                          MessageBox.Show("Username cannot be empty.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                          return false;
                     }
                     // Add a confirmation dialog
                     if (MessageBox.Show($"Are you sure you want to delete user '{username}'?", "Confirm Delete", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                     {
                         ExecNonQuery(
                             $"DROP USER {username} CASCADE", // CASCADE drops schema objects owned by the user
                             "User deleted successfully.",
                             "Lỗi xóa user"
                         );
                         return true;
                     }
                     return false; // User cancelled deletion
                 }
             );
        }

        private void btnCreateRole_Click(object sender, EventArgs e)
        {
            ShowInputForm(
                 "Create New Role",
                 new FormField[]
                 {
                     new FormField("Role Name", "txtRoleName", FieldType.TextBox)
                 },
                 "Create Role",
                 (values) =>
                 {
                     string roleName = values["txtRoleName"];
                      if (string.IsNullOrWhiteSpace(roleName))
                     {
                          MessageBox.Show("Role Name cannot be empty.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                          return false;
                     }
                     ExecNonQuery(
                         $"CREATE ROLE {roleName}",
                         "Role created successfully.",
                         "Lỗi tạo role"
                     );
                     return true;
                 }
             );
        }

        private void btnEditRole_Click(object sender, EventArgs e)
        {
             ShowInputForm(
                 "Rename Role",
                 new FormField[]
                 {
                     new FormField("Current Role Name", "txtCurrentRoleName", FieldType.TextBox),
                     new FormField("New Role Name", "txtNewRoleName", FieldType.TextBox)
                 },
                 "Rename Role",
                 (values) =>
                 {
                     string currentRoleName = values["txtCurrentRoleName"];
                     string newRoleName = values["txtNewRoleName"];
                     if (string.IsNullOrWhiteSpace(currentRoleName) || string.IsNullOrWhiteSpace(newRoleName))
                     {
                          MessageBox.Show("Current and New Role Names cannot be empty.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                          return false;
                     }
                     ExecNonQuery(
                         $"ALTER ROLE {currentRoleName} RENAME TO {newRoleName}",
                         "Role renamed successfully.",
                         "Lỗi cập nhật role"
                     );
                     return true;
                 }
             );
        }

        private void btnDeleteRole_Click(object sender, EventArgs e)
        {
            ShowInputForm(
                 "Delete Role",
                 new FormField[]
                 {
                     new FormField("Role Name", "txtRoleName", FieldType.TextBox)
                 },
                 "Delete Role",
                 (values) =>
                 {
                     string roleName = values["txtRoleName"];
                      if (string.IsNullOrWhiteSpace(roleName))
                     {
                          MessageBox.Show("Role Name cannot be empty.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                          return false;
                     }
                     // Add a confirmation dialog
                     if (MessageBox.Show($"Are you sure you want to delete role '{roleName}'?", "Confirm Delete", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                     {
                        ExecNonQuery(
                           $"DROP ROLE {roleName}",
                           "Role deleted successfully.",
                           "Lỗi xóa role"
                       );
                       return true;
                     }
                     return false; // User cancelled
                 }
             );
        }

        // --- Helper Methods for Dynamic Forms ---

        // Enum to define field types
        private enum FieldType { TextBox }

        // Helper class to define input fields
        private class FormField
        {
            public string LabelText { get; }
            public string ControlName { get; } // Used as key in the values dictionary
            public FieldType Type { get; }
            public bool IsPassword { get; }

            public FormField(string labelText, string controlName, FieldType type, bool isPassword = false)
            {
                LabelText = labelText;
                ControlName = controlName;
                Type = type;
                IsPassword = isPassword;
            }
        }

        /// <summary>
        /// Generates and displays a form within pnlMain using a TableLayoutPanel.
        /// </summary>
        private void ShowInputForm(string title, FormField[] fields, string submitButtonText, Func<System.Collections.Generic.Dictionary<string, string>, bool> submitAction)
        {
            // Clear previous content
            pnlMain.Controls.Clear();

             // Check if connection is open before attempting form action
            if (connection == null || connection.State != ConnectionState.Open)
            {
                MessageBox.Show("Kết nối tới cơ sở dữ liệu chưa được mở.", "Lỗi kết nối", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }


            // --- Create Layout Panel ---
            var tlp = new TableLayoutPanel
            {
                Dock = DockStyle.None, // Don't dock fill initially so we can set AutoSize
                AutoSize = true, // Size based on content
                AutoSizeMode = AutoSizeMode.GrowAndShrink, // Grow to fit content
                ColumnCount = 2, // Label and Input
                //RowCount = fields.Length + 2, // + Title + Button Row (auto-managed by Add)
                Padding = new Padding(20), // Space from the panel edge
                //CellBorderStyle = TableLayoutPanelCellBorderStyle.Single, // Optional: Adds borders for debugging layout
                //Anchor the TLP in the center or top-left
                Anchor = AnchorStyles.Top | AnchorStyles.Left
            };

            // Configure Columns: Label column (auto-size), Input column (fill remaining space)
            tlp.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
            tlp.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100F)); // Use 100% of remaining width

            // --- Add Title Label ---
            var lblTitle = new Label
            {
                Text = title,
                Font = new Font(this.Font.FontFamily, 12, FontStyle.Bold),
                AutoSize = true,
                Anchor = AnchorStyles.Left,
                Margin = new Padding(0, 0, 0, 20) // Add space below title
            };
            tlp.Controls.Add(lblTitle, 0, 0); // Add to column 0, row 0
            tlp.SetColumnSpan(lblTitle, 2); // Make title span across both columns
            tlp.RowStyles.Add(new RowStyle(SizeType.AutoSize)); // Add a row style for the title

            // --- Add Form Fields ---
            var inputControls = new System.Collections.Generic.Dictionary<string, Control>(); // Store controls to get values later

            for (int i = 0; i < fields.Length; i++)
            {
                var field = fields[i];
                int rowIndex = i + 1; // Start adding fields from row 1 (after title)

                // Add Row Style for this field row
                 tlp.RowStyles.Add(new RowStyle(SizeType.AutoSize));

                // Create Label
                var lbl = new Label
                {
                    Text = field.LabelText + ":", // Add colon for clarity
                    AutoSize = true,
                    Anchor = AnchorStyles.Left | AnchorStyles.Top, // Align label to top-left in cell
                    Margin = new Padding(0, 3, 10, 3) // Add some margin right and vertical
                };
                tlp.Controls.Add(lbl, 0, rowIndex); // Add label to column 0

                // Create Input Control based on type
                Control inputControl = null;
                switch (field.Type)
                {
                    case FieldType.TextBox:
                        var txt = new TextBox
                        {
                            Name = field.ControlName, // Set name for lookup
                            Width = 250, // Set a default width, Percent will make it grow
                            Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top, // Make it stretch horizontally, align top
                            Margin = new Padding(0, 0, 0, 5), // Add space below textbox
                            UseSystemPasswordChar = field.IsPassword // Set if it's a password field
                        };
                        inputControl = txt;
                        // Add padding/margin here if needed
                        break;
                        // Add cases for other control types (ComboBox, CheckBox, etc.) if needed
                }

                if (inputControl != null)
                {
                    tlp.Controls.Add(inputControl, 1, rowIndex); // Add control to column 1
                    inputControls[field.ControlName] = inputControl; // Store the control
                }
            }

            // --- Add Submit Button ---
            var btnSubmit = new Button
            {
                Text = submitButtonText,
                AutoSize = true, // Auto-size button based on text
                Anchor = AnchorStyles.Top | AnchorStyles.Right, // Align button to the top-right of its cell
                Margin = new Padding(0, 15, 0, 0) // Add space above the button
            };

            // Add Row Style for the button row
            tlp.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            tlp.Controls.Add(btnSubmit, 1, fields.Length + 1); // Add button to column 1, after all fields
            // If you want the button centered or left, adjust column and anchor
            // If you want the button spanning both columns: tlp.SetColumnSpan(btnSubmit, 2);

            // Attach the click event handler
            btnSubmit.Click += (s, args) =>
            {
                var values = new System.Collections.Generic.Dictionary<string, string>();
                foreach (var pair in inputControls)
                {
                    // Get value based on control type
                    if (pair.Value is TextBox txt)
                    {
                        values[pair.Key] = txt.Text.Trim(); // Trim whitespace
                    }
                    // Add cases for other control types
                }

                // Execute the provided action (submitAction)
                // The action should return true if successful or validation passed, false otherwise
                 submitAction(values);
            };

            // Add the TableLayoutPanel to pnlMain
            pnlMain.Controls.Add(tlp);

            // Re-dock the TLP to the center of pnlMain after AutoSize has calculated
            // Or keep Top|Left anchor and let it position itself
            // For simple forms, Top|Left is fine. For a centered form, you might need to
            // dock it fill temporarily, let it size, then set its location/anchor.
            // Let's stick with Top|Left anchor for simplicity here.
        }


        /// <summary>
        /// Executes a SQL non-query command and shows success or error messages.
        /// </summary>
        private void ExecNonQuery(string sql, string successMsg, string errorTitle)
        {
            // Basic validation for command text to prevent obvious issues (though this isn't full SQL injection protection)
            if (string.IsNullOrWhiteSpace(sql))
            {
                 MessageBox.Show("SQL command is empty.", "Execution Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                 return;
            }

            // Check if connection is open
             if (connection == null || connection.State != ConnectionState.Open)
            {
                MessageBox.Show("Kết nối tới cơ sở dữ liệu chưa được mở.", "Lỗi kết nối", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            try
            {
                using (var cmd = new OracleCommand(sql, connection))
                {
                    // Use CommandType.Text (default)
                    cmd.ExecuteNonQuery();
                }
                MessageBox.Show(successMsg, "Thành công", MessageBoxButtons.OK, MessageBoxIcon.Information);
                // Optional: Refresh the relevant view (e.g., View Users after creating/deleting a user)
                // This would require knowing which view corresponds to which action.
                // For simplicity, we won't auto-refresh here, but it's a good UX feature.
            }
            catch (OracleException ex)
            {
                 // Handle specific Oracle errors if necessary
                 // E.g., ORA-01920: user name '...' conflicts with another user or role name
                 // E.g., ORA-01918: user '...' does not exist
                 // E.g., ORA-00922: missing or invalid SQL statement (less likely with generated SQL, but possible)
                 MessageBox.Show($"Oracle Error {ex.Number}: {ex.Message}", errorTitle, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message, errorTitle, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // Ensure connection is closed when the form is closed
        protected override void OnFormClosed(FormClosedEventArgs e)
        {
            base.OnFormClosed(e);
            if (connection != null && connection.State == ConnectionState.Open)
            {
                connection.Close();
                // connection.Dispose(); // Dispose connection if you won't reuse it
            }
             // If the connection was passed in via the constructor, you might NOT want to close it here
             // if it's shared elsewhere. Need a flag or different handling if that's the case.
             // For this example, assume this form owns the connection it opens or receives.
        }

        // --- Designer Generated Code (from previous step) ---
        private System.ComponentModel.IContainer components = null;
        private Panel pnlMain;
        private Button btnViewUsers;
        private Button btnViewRoles;
        private Button btnCreateUser;
        private Button btnEditUser;
        private Button btnDeleteUser;
        private Button btnCreateRole;
        private Button btnEditRole;
        private Button btnDeleteRole;

        // Containers for the new layout (from previous step)
        private Panel pnlLeftMenu;
        private FlowLayoutPanel flpButtons;


        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        // This is the updated InitializeComponent from the previous step
        private void InitializeComponent()
        {
            this.pnlLeftMenu = new Panel();
            this.flpButtons = new FlowLayoutPanel();
            this.pnlMain = new Panel();
            this.btnViewUsers = new Button();
            this.btnViewRoles = new Button();
            this.btnCreateUser = new Button();
            this.btnEditUser = new Button();
            this.btnDeleteUser = new Button();
            this.btnCreateRole = new Button();
            this.btnEditRole = new Button();
            this.btnDeleteRole = new Button();

            // pnlLeftMenu setup
            this.pnlLeftMenu.Controls.Add(this.flpButtons);
            this.pnlLeftMenu.Dock = DockStyle.Left;
            this.pnlLeftMenu.Width = 180; // Keep a fixed width for the menu
            this.pnlLeftMenu.Padding = new Padding(10); // Add padding around the flow layout panel

            // flpButtons setup
            this.flpButtons.FlowDirection = FlowDirection.TopDown;
            this.flpButtons.Dock = DockStyle.Fill; // Fill the left panel
            this.flpButtons.AutoSize = true;
            this.flpButtons.WrapContents = false;
            this.flpButtons.Controls.Add(this.btnViewUsers);
            this.flpButtons.Controls.Add(this.btnViewRoles);
            this.flpButtons.Controls.Add(this.btnCreateUser);
            this.flpButtons.Controls.Add(this.btnEditUser);
            this.flpButtons.Controls.Add(this.btnDeleteUser);
            this.flpButtons.Controls.Add(this.btnCreateRole);
            this.flpButtons.Controls.Add(this.btnEditRole);
            this.flpButtons.Controls.Add(this.btnDeleteRole);

            // Button styling (applied inside the FlowLayoutPanel)
            Size buttonSize = new Size(150, 30);
            Padding buttonMargin = new Padding(0, 0, 0, 10); // Space between buttons

            this.btnViewUsers.Size = buttonSize;
            this.btnViewUsers.Margin = buttonMargin;
            this.btnViewUsers.Text = "View Users";
            this.btnViewUsers.Click += new System.EventHandler(this.btnViewUsers_Click);

            this.btnViewRoles.Size = buttonSize;
            this.btnViewRoles.Margin = buttonMargin;
            this.btnViewRoles.Text = "View Roles";
            this.btnViewRoles.Click += new System.EventHandler(this.btnViewRoles_Click);

            this.btnCreateUser.Size = buttonSize;
            this.btnCreateUser.Margin = buttonMargin;
            this.btnCreateUser.Text = "Create User";
            this.btnCreateUser.Click += new System.EventHandler(this.btnCreateUser_Click);

            this.btnEditUser.Size = buttonSize;
            this.btnEditUser.Margin = buttonMargin;
            this.btnEditUser.Text = "Edit User";
            this.btnEditUser.Click += new System.EventHandler(this.btnEditUser_Click);

            this.btnDeleteUser.Size = buttonSize;
            this.btnDeleteUser.Margin = buttonMargin;
            this.btnDeleteUser.Text = "Delete User";
            this.btnDeleteUser.Click += new System.EventHandler(this.btnDeleteUser_Click);

            this.btnCreateRole.Size = buttonSize;
            this.btnCreateRole.Margin = buttonMargin;
            this.btnCreateRole.Text = "Create Role";
            this.btnCreateRole.Click += new System.EventHandler(this.btnCreateRole_Click);

            this.btnEditRole.Size = buttonSize;
            this.btnEditRole.Margin = buttonMargin;
            this.btnEditRole.Text = "Edit Role";
            this.btnEditRole.Click += new System.EventHandler(this.btnEditRole_Click);

            this.btnDeleteRole.Size = buttonSize;
            this.btnDeleteRole.Margin = new Padding(0); // No margin for the last button in the flow
            this.btnDeleteRole.Text = "Delete Role";
            this.btnDeleteRole.Click += new System.EventHandler(this.btnDeleteRole_Click);

            // pnlMain setup (content area)
            this.pnlMain.Dock = DockStyle.Fill; // Fill the remaining space
            this.pnlMain.BorderStyle = BorderStyle.FixedSingle; // Keep the border
            this.pnlMain.BackColor = SystemColors.ControlLightLight; // Optional: Give it a background color

            // Form setup
            this.ClientSize = new Size(800, 450); // A bit taller default size
            this.Controls.Add(this.pnlMain);      // Add main panel first (fills)
            this.Controls.Add(this.pnlLeftMenu); // Add left menu panel (docks left)

            this.Text = "XUniversity User and Role Management"; // More specific title
            this.ResumeLayout(false); // Ensure layout is applied after adding controls
        }
    }
}